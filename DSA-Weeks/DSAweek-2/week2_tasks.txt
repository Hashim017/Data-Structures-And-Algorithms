1) Check Valid Parenthesis:

class Solution {
public:
    bool isValid(string s) {
        stack<char> mystack;
    for (char c : s)
    {
        if (c == '(' || c == '[' || c == '{')
        {
            mystack.push(c);
        }
        else if (c == ')' || c == ']' || c == '}')
        {
            if (mystack.empty())
            {
                return false;
            }

            char top = mystack.top();
            if (top == '(' && c != ')' || top == '[' && c != ']' || top == '{' && c != '}')
            {
                return false;
            }
            mystack.pop();
        }
    }
     if (mystack.empty())
        return true;
    return false;
    }
};

2) Trapping Rain Water:

class Solution {
public:
    int trap(vector<int>& height) {
     int size = height.size();
    int *left = new int[size];
    left[0] = height[0];
    int *right = new int[size];
    right[size - 1] = height[size - 1];
    for (int i = 1; i < size; i++)
    {
        left[i] = max(left[i - 1], height[i]);
    }
    for (int i = size - 2; i >= 0; i--)
    {
        right[i] = max(right[i + 1], height[i]);
    }

    int ans = 0;
    for (int i = 0; i < size; i++)
    {
        ans += min(left[i], right[i]) - height[i];
    }
    return ans;   
    }
};

3) Maximum Amount Of Water:

class Solution {
public:
    int maxArea(vector<int>& height) {
        int left = 0;
        int right = height.size() - 1;
        int maxArea = 0;

        while (left < right) 
	{
	    int length = right - left;
            int currentArea = min(height[left], height[right]) * length;
            maxArea = max(maxArea, currentArea);

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxArea;
    }
};

4) Number Of Students Unable To Eat Lunch:

class Solution {
public:
    int countStudents(vector<int>& students, vector<int>& sandwiches) {
        stack<int> st;
        queue<int> qu;

        for (int i = 0; i < students.size(); i++)
        {
            st.push(sandwiches[sandwiches.size() - 1 - i]);
            qu.push(students[i]);
        }
        int count = 0;
        while (!st.empty())
        {
            if (st.top() == qu.front())
            {
                st.pop();
                qu.pop();
                count = 0;
            }
            else
            {
                qu.push(qu.front());
                qu.pop();
                count++;
            }

            if (count == qu.size())
                
	    {
		break;
	    }
        }
        return qu.size();
    }   
};

5) Maximum Sum Circular Subarray:

class Solution
{
public:
    int maxSubarraySumCircular(vector<int> &nums)
    {
        int maximum = 0, minimum = 0, sum1 = nums[0], sum2 = nums[0], total = 0;
        for (int i = 0; i < nums.size(); i++)
        {
            maximum = max(maximum + nums[i], nums[i]);
            minimum = min(minimum + nums[i], nums[i]);
            sum1 = max(sum1, maximum);
            sum2 = min(sum2, minimum);
            total += nums[i];
        }
        if (sum1 > 0)
            return max(sum1, total - sum2);
        else
            return sum1;
    }
};

6) Implement Stack Using Queues:

class StackUsingQueue
{
public:
    queue<int> myQueue;
    void push(int x)
    {
        myQueue.push(x);
        for (int i = 0; i < myQueue.size() - 1; i++)
        {
            myQueue.push(myQueue.front());
            myQueue.pop();
        }
    }
    int pop()
    {
        int k = myQueue.front();
        myQueue.pop();
        return k;
    }
    int top()
    {
        return myQueue.front();
    }
    bool empty()
    {
        return myQueue.empty();
    }
};

7) Aestroid Collisions:

class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
    stack<int> stack;
    for (int it : asteroids)
    {
        int flag = 1;
        while (!stack.empty() && (stack.top() > 0 && it < 0))
        {
            if (abs(stack.top()) < abs(it))
            {
                stack.pop();
                continue;
            }
            else if (abs(stack.top()) == abs(it))
                stack.pop();
            flag = 0;
            break;
        }
        if (flag)
            stack.push(it);
    }
    vector<int> ans(stack.size());
    for (int i = ans.size() - 1; i >= 0; i--)
    {
        ans[i] = stack.top();
        stack.pop();
    }
    return ans;
    }
};

8) Decode String:

class Solution {
public:
    string decodeString(string s) {
    stack<string> stringStack;
    stack<int> numberStack;
    string ans = "";
    int num = 0;
    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] >= '0' && s[i] <= '9')
        {
            num = s[i] - '0';
        }
        else if (s[i] == '[')
        { 
            stringStack.push(ans);
            ans = "";
            numberStack.push(num);
            num = 0;
        }
        else if (s[i] == ']')
        { 
            string temp = ans;
            ans = stringStack.top();
            stringStack.pop();
            int times = numberStack.top();
            numberStack.pop();
            while (times--)
            {
                ans += temp;
            }
        }
        else
        { 
            ans += s[i];
        }
    }
    return ans;
    }
};

9) Min Stack:

class MinStack {
public:
   stack<pair<int, int>> st;
    MinStack()
    {
    }
    void push(int val)
    {
        if (st.empty())
        {
            st.push({val, val});
        }
        else
        {
            int k = st.top().second;
            if (k < val)
            {
                st.push({val, k});
            }
            else
            {
                st.push({val, val});
            }
        }
    }

    void pop()
    {
        st.pop();
    }

    int top()
    {
        return st.top().first;
    }

    int getMin()
    {
        return st.top().second;
    }
};


