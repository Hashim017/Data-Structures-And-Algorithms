// LeetCode Problem # 1

    vector<int> smallerNumbersThanCurrent(vector<int> &nums)
    {
        int size = nums.size();
        vector<int> output(size, 0);

        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                if (nums[j] < nums[i])
                {
                    output[i]++;
                }
            }
        }
        return output;
    }

    // LeetCode Problem # 2

    int removeElement(vector<int> &nums, int val)
    {
        int k = 0;
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] != val)
            {
                nums[k] = nums[i];
                k++;
            }
        }
        return k;
    }

    // LeetCode Problem # 3

    bool searchMatrix(vector<vector<int>> &matrix, int target)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        int start = 0;
        int end = (m * n) - 1;
        while (start <= end)
        {
            int mid = (start + end) / 2;
            int x = mid / n;
            int y = mid % n;
            if (matrix[x][y] == target)
                return true;
            else if (matrix[x][y] < target)
                start = mid + 1;
            else
                end = mid - 1;
        }
        return false;
    }

    // LeetCode Problem # 4

    int removeDuplicates(vector<int> &nums)
    {
        int k = 1;
        for (int i = 1; i < nums.size(); i++)
        {
            if (nums[i] != nums[i - 1])
            {
                nums[k] = nums[i];
                k++;
            }
        }
        return k;
    }

    // LeetCode Problem # 5

    int maxSubArray(vector<int> &nums)
    {
        int ans = nums[0];
        int sum = 0;

        for (int i = 0; i < nums.size(); i++)
        {
            sum = sum + nums[i];
            if (sum > ans)
                ans = sum;
            if (sum < 0)
                sum = 0;
        }
        return ans;
    }

    // LeetCode Problem # 6

    int firstBadVersion(int n)
    {
        long long int start = 0;
        long long int end = n;
        while (start <= end)
        {
            long long int mid = (start + end) / 2;
            if (isBadVersion(mid))
                end = mid - 1;
            else
                start = mid + 1;
        }
        return start;
    }

    // LeetCode Problem # 7

    int firstMissingPositive(vector<int> &nums)
    {
        int n = nums.size();
        for (int i = 0; i < n; i++)
        {
            while (nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i] - 1])
            {
                int temp = nums[i];
                nums[i] = nums[temp - 1];
                nums[temp - 1] = temp;
            }
        }
        for (int i = 0; i < n; i++)
        {
            if (nums[i] != i + 1)
            {
                return i + 1;
            }
        }

        return n + 1;
    }